<h1>Conversor DOCs em PDF</h1>

<div class="mt-4 d-flex justify-content-between align-items-center gap-4">
    <InputFile class="form-control" OnChange="EnviarDocx" accept=".docx" placeholder="@(fullPdfBase64 != null ? file?.Name : "Nenhum arquivo selecionado")"/>
    <button type="button" class="btn-close" @onclick="FecharPdf"/>
</div>

@if ((pdfPreviewBase64 != null || fullPdfBase64 != null) && !fullPdfBase64.Contains("Erro ao gerar pdf"))
{
    @if (moreThan1MB)
    {
        <p class="mt-5 fw-semibold">Pré-visualização do PDF gerado</p>
        <a href="@($"data:application/pdf;base64,{fullPdfBase64}")"
         download="arquivo.pdf"
         class="btn btn-primary">
            Baixar PDF Completo
         </a>

        <iframe class="mt-4" src="@($"data:application/pdf;base64,{pdfPreviewBase64}")"
            width="100%" height="600px">
        </iframe>
    }else
    {
        <iframe class="mt-4" src="@($"data:application/pdf;base64,{fullPdfBase64}")"
            width="100%" height="600px">
        </iframe>
    }
}else if(fullPdfBase64 != null && fullPdfBase64.Contains("Erro ao gerar pdf"))
{
    <iframe class="mt-4" src="@($"data:application/pdf;base64,{fullPdfBase64}")"
            width="100%" height="600px">
    </iframe>
}

@code {
    private string? pdfPreviewBase64 = null;

    private string? fullPdfBase64 = null;

    private IBrowserFile? file;

    private bool moreThan1MB;

    private async Task EnviarDocx(InputFileChangeEventArgs e)
    {
        file = e.File;
        using MultipartFormDataContent? content = new MultipartFormDataContent();
        var stream = file.OpenReadStream(maxAllowedSize: file.Size);
        content.Add(new StreamContent(stream), "file", file.Name);

        moreThan1MB = file.Size > 1 * 1024 * 1024;

        HttpClient client = new HttpClient();

        HttpResponseMessage response = await client.PostAsync($"http://localhost:8080/api/pdf/from-docx?fileIsMoreThan1MB={moreThan1MB}", content);

        if(response.IsSuccessStatusCode){
            if(moreThan1MB){
                var json = await response.Content.ReadFromJsonAsync<JsonElement>();
                pdfPreviewBase64 = json.GetProperty("previewFile").GetString();
                fullPdfBase64 = json.GetProperty("fullFile").GetString();
            }
            else{
                var pdfBytes = await response.Content.ReadAsByteArrayAsync();
                fullPdfBase64 = Convert.ToBase64String(pdfBytes);
            }

            @* var pdfBytes = await response.Content.ReadAsByteArrayAsync();
            pdfBase64 = Convert.ToBase64String(pdfBytes); *@
        }
        else{
            fullPdfBase64 = $"Erro ao gerar pdf: Erro {response.StatusCode}";
        }
    }

    private void FecharPdf()
    {
        fullPdfBase64 = null;
        pdfPreviewBase64 = null;
        file = null;
    }
}